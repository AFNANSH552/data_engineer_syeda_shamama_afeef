import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
import json
from typing import Dict, Any

class B2BDataVisualizer:
    """Visualize B2B marketplace insights generated by B2BDataAnalyzer"""

    def __init__(self, insights: Dict[str, Any], output_dir: str = "data/outputs/"):
        self.insights = insights
        self.output_dir = output_dir
        os.makedirs(self.output_dir, exist_ok=True)
        sns.set_style("whitegrid")
    
    def create_comprehensive_dashboard(self, save: bool = True):
        """Generate all key visualizations from insights"""
        figs = {}

        # ---- CATEGORY DISTRIBUTION ----
        categories = self.insights.get("category_insights", {}).get("category_distribution", {})
        if categories:
            fig = px.bar(
                x=list(categories.keys()),
                y=list(categories.values()),
                title="Product Category Distribution",
                labels={"x": "Category", "y": "Count"}
            )
            figs["category_distribution"] = fig
            if save:
                fig.write_html(os.path.join(self.output_dir, "category_distribution.html"))

        # ---- SUPPLIER ANALYSIS ----
        suppliers = self.insights.get("supplier_insights", {})
        top_suppliers = suppliers.get("top_suppliers", {})
        if top_suppliers:
            fig = px.bar(
                x=list(top_suppliers.keys()),
                y=list(top_suppliers.values()),
                title="Top Suppliers",
                labels={"x": "Supplier", "y": "Number of Products"}
            )
            figs["top_suppliers"] = fig
            if save:
                fig.write_html(os.path.join(self.output_dir, "top_suppliers.html"))

        # ---- PRICE RANGE DISTRIBUTION ----
        pricing = self.insights.get("pricing_insights", {})
        price_ranges = pricing.get("price_range_distribution", {})
        if price_ranges:
            fig = px.pie(
                names=list(price_ranges.keys()),
                values=list(price_ranges.values()),
                title="Price Range Distribution"
            )
            figs["price_range_distribution"] = fig
            if save:
                fig.write_html(os.path.join(self.output_dir, "price_range_distribution.html"))

        # ---- GEOGRAPHICAL DISTRIBUTION ----
        location = self.insights.get("location_insights", {}).get("state_analysis", {})
        state_dist = location.get("state_distribution", {})
        if state_dist:
            fig = px.bar(
                x=list(state_dist.keys()),
                y=list(state_dist.values()),
                title="Products by State",
                labels={"x": "State", "y": "Number of Products"}
            )
            figs["products_by_state"] = fig
            if save:
                fig.write_html(os.path.join(self.output_dir, "products_by_state.html"))

        # ---- TEXT ANALYSIS - COMMON TITLE WORDS ----
        title_words = self.insights.get("text_insights", {}).get("title_analysis", {}).get("common_title_words", [])
        if title_words:
            words, counts = zip(*title_words)
            fig = px.bar(
                x=list(words),
                y=list(counts),
                title="Most Common Words in Titles",
                labels={"x": "Word", "y": "Frequency"}
            )
            figs["common_title_words"] = fig
            if save:
                fig.write_html(os.path.join(self.output_dir, "common_title_words.html"))

        # ---- TEXT ANALYSIS - COMMON DESCRIPTION WORDS ----
        desc_words = self.insights.get("text_insights", {}).get("description_analysis", {}).get("common_description_words", [])
        if desc_words:
            words, counts = zip(*desc_words)
            fig = px.bar(
                x=list(words),
                y=list(counts),
                title="Most Common Words in Descriptions",
                labels={"x": "Word", "y": "Frequency"}
            )
            figs["common_description_words"] = fig
            if save:
                fig.write_html(os.path.join(self.output_dir, "common_description_words.html"))

        # Save all insights JSON for reference
        if save:
            json_path = os.path.join(self.output_dir, "eda_insights.json")
            with open(json_path, "w", encoding="utf-8") as f:
                json.dump(self.insights, f, indent=4)

        print(f"\nâœ… Visualizations created and saved in: {self.output_dir}")
        return figs
